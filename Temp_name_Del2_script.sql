CREATE DATABASE NONPROFIT_ORG
USE NONPROFIT_ORG;

--CREATE VOLUNTEER ENTITY
CREATE TABLE VOLUNTEER (
VOLUNTEER_ID CHAR(6) CONSTRAINT VOLUNTEER_VOLUNTEER_ID_PK PRIMARY KEY ,
VOLUNTEER_FNAME VARCHAR(20),
VOLUNTEER_LNAME VARCHAR(20),
PHONE_NUMBER CHAR(10),
STREET VARCHAR(20),
CITY VARCHAR(20),
COUNTRY CHAR(2),
POSTAL_CODE VARCHAR(6) );

--SEQUENCE FOR VOLUNTEER 
CREATE SEQUENCE VOLUNTEER_SQ
START WITH 10010
INCREMENT BY 1;

--CREATE TASK ENTITY
CREATE TABLE TASK(
TASK_NUM CHAR(6) CONSTRAINT TASK_TASK_NUM_PK PRIMARY KEY,
TASK_DESCRIPTION VARCHAR(20) NOT NULL,
TASK_STATUS VARCHAR(15) NOT NULL );

--CREATE ASSIGNMENT ENTITY
CREATE TABLE ASSIGNMENT(
VOLUNTEER_ID CHAR(6) CONSTRAINT ASSIGNMENT_VOLUNTEER_ID_FK FOREIGN KEY (VOLUNTEER_ID) REFERENCES VOLUNTEER ON DELETE CASCADE,
TASK_NUM CHAR(6) CONSTRAINT ASSIGNMENT_TASK_NUM_FK FOREIGN KEY (TASK_NUM) REFERENCES TASK ON DELETE CASCADE,
TASK_START_DATE DATE,
TASK_START_TIME CHAR(5),
TASK_END_DATE DATE,
TASK_END_TIME CHAR(5),
CONSTRAINT ASSIGNMENT_VOLUNTEERID_TASKNUM_PK PRIMARY KEY (VOLUNTEER_ID,TASK_NUM) );

--CREATE PACKAGE ENTITY
CREATE TABLE PACKAGE(
PACKAGE_NUM CHAR(6) CONSTRAINT PACKAGE_PACKAGE_NUM_PK PRIMARY KEY,
DATE_CREATED DATE NOT NULL,
TOTAL_WEIGHT NUMERIC (6,2) NOT NULL,
TASK_NUM CHAR(6) CONSTRAINT PACKAGE_TASK_NUM_FK FOREIGN KEY (TASK_NUM) REFERENCES TASK ON DELETE SET NULL );

-- CREATE ITEM ENTITY
CREATE TABLE ITEM(
ITEM_ID CHAR(6) CONSTRAINT ITEM_ITEM_ID_PK  PRIMARY KEY ,
ITEM_DESCRIPTION VARCHAR(50) NOT NULL,
ITEM_VALUE NUMERIC(5,2),
ITEM_QUANTITY INT IDENTITY (5, 5));

--CREATE CONTENTS ENTITY
CREATE TABLE CONTENTS(
PACKAGE_NUM CHAR(6) CONSTRAINT CONTENTS_PACKAGE_NUM_FK FOREIGN KEY (PACKAGE_NUM) REFERENCES PACKAGE ON DELETE CASCADE,
ITEM_ID CHAR(6),
CONSTRAINT CONTENTS_PACKAGENUM_ITEMID_PK PRIMARY KEY (PACKAGE_NUM, ITEM_ID) );


--ALTER STATEMENTS
ALTER TABLE CONTENTS
ADD CONSTRAINT CONTENTS_ITEM_ID_FK FOREIGN KEY (ITEM_ID) REFERENCES ITEM ON DELETE CASCADE;

ALTER TABLE ITEM
ALTER COLUMN ITEM_VALUE NUMERIC(5,2) NOT NULL;

--INSERT VALUES
INSERT INTO VOLUNTEER VALUES (NEXT VALUE FOR VOLUNTEER_SQ,'Josh','Owen','7053242559','3755 40th Street','Calgary','CA', 'T2K0P7');
INSERT INTO VOLUNTEER VALUES (NEXT VALUE FOR VOLUNTEER_SQ,'Tamara','Wallace','2635722221','1342 Rene-Levesques','Montreal','CA', 'H3B4W8');
INSERT INTO VOLUNTEER VALUES (NEXT VALUE FOR VOLUNTEER_SQ,'Kye','Shaw','4748981353','4331 Galts Avenue','Alberta','CA', 'T4N5Z9');
INSERT INTO VOLUNTEER VALUES (NEXT VALUE FOR VOLUNTEER_SQ,'Alexa','Neal','2269922923','187 rue Garneau','Quebec','CA', 'G1V3V5');
INSERT INTO VOLUNTEER VALUES (NEXT VALUE FOR VOLUNTEER_SQ,'Christian','Carrillo','2046964326','2878 Carlson Road','Prince George','CA', 'V2L5E5');

INSERT INTO TASK VALUES ('01','Receiving','Complete');
INSERT INTO TASK VALUES ('02','Creating','In progress');
INSERT INTO TASK VALUES ('03','Packing','In progress');
INSERT INTO TASK VALUES ('04','Checking ','In progress');
INSERT INTO TASK VALUES ('05','Shipping','In progress');


INSERT INTO ASSIGNMENT VALUES ((SELECT VOLUNTEER_ID FROM VOLUNTEER WHERE VOLUNTEER_FNAME = 'Josh'),'01',GETDATE(),'11:20', GETDATE(),'11:25');
INSERT INTO ASSIGNMENT VALUES ((SELECT VOLUNTEER_ID FROM VOLUNTEER WHERE VOLUNTEER_FNAME = 'Tamara'),'02', GETDATE(),'11:30',NULL, NULL);
INSERT INTO ASSIGNMENT VALUES ((SELECT VOLUNTEER_ID FROM VOLUNTEER WHERE VOLUNTEER_FNAME = 'Kye'),'03', GETDATE(), '8:30' , NULL , NULL);
INSERT INTO ASSIGNMENT VALUES ((SELECT VOLUNTEER_ID FROM VOLUNTEER WHERE VOLUNTEER_FNAME = 'Alexa'),'04', GETDATE(), '9:45', NULL , NULL);
INSERT INTO ASSIGNMENT VALUES ((SELECT VOLUNTEER_ID FROM VOLUNTEER WHERE VOLUNTEER_FNAME = 'Christian'),'05', GETDATE(),'17:00', NULL, NULL);

INSERT INTO PACKAGE VALUES ('001','2020-03-06','6','01');
INSERT INTO PACKAGE VALUES ('002','2020-03-08','6','03');
INSERT INTO PACKAGE VALUES ('003','2020-03-09','6','04');
INSERT INTO PACKAGE VALUES ('004','2020-03-11','6','02');
INSERT INTO PACKAGE VALUES ('005','2020-03-15','6','05');

INSERT INTO ITEM VALUES ('I00001','Canned Goods','0.99');
INSERT INTO ITEM VALUES ('I00002', 'Instant Noodles','0.99');
INSERT INTO ITEM VALUES ('I00003', 'Blankets','10.50');
INSERT INTO ITEM VALUES ('I00004', 'Shirts','3.50');
INSERT INTO ITEM VALUES ('I00005', 'Hygiene Kit','1.00');

INSERT INTO CONTENTS VALUES ('001', 'I00005');
INSERT INTO CONTENTS VALUES ('002', 'I00003');
INSERT INTO CONTENTS VALUES ('003', 'I00002');
INSERT INTO CONTENTS VALUES ('004', 'I00001');
INSERT INTO CONTENTS VALUES ('005', 'I00004');


---------------------------------------------2ND DELIVERABLE CHANGES-------------------------------------------------------------------

--ADDING CHECK CONSTRAINT ON TASK STATUS (TASK TABLE)
ALTER TABLE TASK
ADD CONSTRAINT CHECK_TASK_STATUS_TASK CHECK (TASK_STATUS = 'OPEN' OR TASK_STATUS = 'IN PROGRESS' OR TASK_STATUS = 'COMPLETE'); 

--ADDING UNIQUE CONSTRAINT ON PHONE_NUMBER( VOLUNTEER TABLE)
ALTER TABLE VOLUNTEER
ADD CONSTRAINT UQ_PHONE_NUMBER_VOLUNTEER UNIQUE (PHONE_NUMBER);

--ALTER 1ST INDEX TO ADD LNAME
DROP INDEX VOLUNTEER_FNAME_INDX ON VOLUNTEER 

CREATE INDEX VOLUNTEER_NAME_INDX ON VOLUNTEER (VOLUNTEER_FNAME, VOLUNTEER_LNAME);

--ADDING 2ND INDEX
DROP INDEX TASK_NUM_INDX ON TASK

CREATE INDEX ITEM_DESCRIPTION_INDX ON ITEM (ITEM_DESCRIPTION);

--------------------------------------------DELIVERABLE 3-----------------------------------------------

 
--------------------------------3 COMPLEX QUERIES-----------------------------------------

---------------------------------------1---------------------------------------------------
-- FIND WHICH ITEM IS IN EACH PACKAGE
SELECT C.PACKAGE_NUM, I.ITEM_ID, ITEM_DESCRIPTION
FROM ITEM I JOIN CONTENTS C
ON I.ITEM_ID = C.ITEM_ID
JOIN PACKAGE P 
ON C.PACKAGE_NUM = P.PACKAGE_NUM
WHERE P.TASK_NUM = (SELECT TASK_NUM
					FROM TASK
					WHERE TASK_STATUS = 'Complete')
ORDER BY C.PACKAGE_NUM

---------------------------------------2---------------------------------------------------



---------------------------------------3---------------------------------------------------



--------------------------------3 COMPLEX VIEWS--------------------------------------------

---------------------------------------1---------------------------------------------------
GO
CREATE VIEW TASK_VIEW
AS
SELECT V.VOLUNTEER_FNAME, V.VOLUNTEER_LNAME, T.TASK_DESCRIPTION
FROM VOLUNTEER V JOIN ASSIGNMENT A
ON V.VOLUNTEER_ID = A.VOLUNTEER_ID
JOIN TASK T 
ON T.TASK_NUM = A.TASK_NUM 
WHERE A.TASK_NUM = T.TASK_NUM;

SELECT * FROM TASK_VIEW

---------------------------------------2---------------------------------------------------
GO
CREATE VIEW  VOLUNTEER_PACKAGE_VIEW
AS
SELECT V.VOLUNTEER_FNAME, P.PACKAGE_NUM,P.DATE_CREATED
FROM VOLUNTEER V JOIN ASSIGNMENT A
ON V.VOLUNTEER_ID = A.VOLUNTEER_ID
JOIN TASK T 
ON T.TASK_NUM=A.TASK_NUM
JOIN PACKAGE P
ON P.TASK_NUM = T.TASK_NUM
WHERE DAY(P.DATE_CREATED)BETWEEN '06' AND '09'
GROUP BY P.PACKAGE_NUM, V.VOLUNTEER_FNAME,P.DATE_CREATED;

SELECT * FROM  VOLUNTEER_PACKAGE_VIEW

---------------------------------------3---------------------------------------------------
GO 
CREATE VIEW ITEM_PRICE_VIEW
AS
SELECT I.ITEM_DESCRIPTION,I.ITEM_VALUE
FROM ITEM I
WHERE I.ITEM_VALUE BETWEEN '0.99' AND '3.50';

SELECT * FROM ITEM_PRICE_VIEW;

------------------------------------------------STORED PROCEDURES------------------------------------------------

-- TRY TO DELETE A VOLUNTEER 


---------------------------------------------------TRIGGER------------------------------------------------------
GO
ALTER TRIGGER TASK_STAT_TRIGGER ON ASSIGNMENT
AFTER UPDATE
AS
DECLARE @TASKNUM CHAR(6), @STARTDATE DATE, @STARTDATE_COUNT INT,
@STARTTIME CHAR(5), @STARTTIME_COUNT INT, 
@ENDTIME CHAR(5), @END_COUNT INT
BEGIN

SELECT @TASKNUM = TASK_NUM FROM INSERTED

SELECT @STARTDATE = TASK_START_DATE FROM ASSIGNMENT WHERE TASK_NUM = @TASKNUM
SELECT @STARTDATE_COUNT = COUNT(*) FROM INSERTED WHERE TASK_START_DATE = @STARTDATE

SELECT @STARTTIME = TASK_START_TIME FROM ASSIGNMENT WHERE TASK_NUM = @TASKNUM
SELECT @STARTTIME_COUNT = COUNT(*)  FROM INSERTED WHERE TASK_START_TIME = @STARTTIME

SELECT @ENDTIME = TASK_END_TIME FROM ASSIGNMENT WHERE TASK_NUM = @TASKNUM
SELECT @END_COUNT = COUNT(*)  FROM INSERTED WHERE TASK_END_TIME = @ENDTIME

--IF START DATE IS ADDED = OPEN
IF @STARTDATE_COUNT > 0
	UPDATE TASK
	SET TASK_STATUS = 'Open'
	WHERE TASK_NUM = @TASKNUM

--IF START TIME IS ADDED = IN PROGRESS
IF @STARTTIME_COUNT > 0
	UPDATE TASK
	SET TASK_STATUS = 'In Progress'
	WHERE TASK_NUM = @TASKNUM
		
--IF END TIME IS ADDED = COMPLETE
IF @END_COUNT > 0
	UPDATE TASK
	SET TASK_STATUS = 'Complete'
	WHERE TASK_NUM = @TASKNUM
END;

SELECT * FROM ASSIGNMENT
SELECT * FROM TASK
select * from volunteer

----------------------------------------------TESTING TRIGGER----------------------------------------------------------------------
UPDATE ASSIGNMENT
SET TASK_START_TIME = '10:00'
WHERE TASK_NUM = '05' AND VOLUNTEER_ID = '10014'

INSERT INTO VOLUNTEER VALUES (NEXT VALUE FOR VOLUNTEER_SQ,'Amanda','Enid','2049086745','38 Av Road','Westmount','CA', 'H3M2V5');
INSERT INTO TASK VALUES ('06','Packing', 'Not Started');

INSERT INTO ASSIGNMENT VALUES ((SELECT VOLUNTEER_ID FROM VOLUNTEER WHERE VOLUNTEER_FNAME = 'Amanda'),'06', NULL, NULL, NULL, NULL);

UPDATE ASSIGNMENT
SET TASK_START_DATE = GETDATE()
WHERE TASK_NUM = '06' AND VOLUNTEER_ID = '10018'

SET TASK_END_DATE = GETDATE(), TASK_END_TIME = '11:45'
WHERE TASK_NUM = '02'


-------------------------DATABASE ADMINSTRATOR-----------------------------
CREATE LOGIN login_admin WITH PASSWORD = 'DatabaseProject2023';
CREATE USER user_admin FOR LOGIN login_admin
GRANT SELECT, INSERT, DELETE, UPDATE ON VOLUNTEER TO user_admin WITH GRANT OPTION

-------------------------OTHER LOGINS------------------------------------
CREATE LOGIN LOGIN1 WITH PASSWORD = 'DatabaseProject2023';
CREATE USER USER1 FOR LOGIN LOGIN1

CREATE LOGIN LOGIN2 WITH PASSWORD = 'DatabaseProject2023';
CREATE USER USER2 FOR LOGIN LOGIN2

---------------------------CREATE ROLES WITH LOGINS--------------------------
CREATE ROLE DATABASE_TEAM_MEMBERS AUTHORIZATION user_admin
ALTER ROLE DATABASE_TEAM_MEMBERS ADD MEMBER LOGIN1;
ALTER ROLE DATABASE_TEAM_MEMBERS ADD MEMBER LOGIN2;

GRANT ALL TO DATABASE_TEAM_MEMBERS WITH GRANT OPTION;

